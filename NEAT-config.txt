# NEAT (NeuroEvolution of Augmenting Topologies) is an evolutionary algorithm that creates artificial neural networks

# genome - member of population (ex. dragons), set of genes that together code for a (neural network) phenotype
# gene - information coding for a particular aspect of a neural network phenotype
# node gene - specifies a single neuron (ex. input, output)
# node connection - specifies a single connection between neurons
# genomic distance - approximate measure of the difference between genomes, used in dividing the population into species

# node output function: activation(bias+(response*aggregation(inputs)))


[NEAT]
# take dragons with best result
fitness_criterion     = max
# score to achive
fitness_threshold     = 800
# size of population 
pop_size              = 50
reset_on_extinction   = False

[DefaultGenome]
# node activation options
# using tanH function 
activation_default      = tanh
# chance for new random function
activation_mutate_rate  = 0.0
# choose options for random picker
activation_options      = tanh

# node aggregation options
# default aggregation of inputs
aggregation_default     = sum
aggregation_mutate_rate = 0.0
aggregation_options     = sum

# node bias options
# bias attribute mean type
bias_init_type          = gaussian
# bias attribute values for new nodes
bias_init_mean          = 0.0  
bias_init_stdev         = 1.0
# max value to pick
bias_max_value          = 30.0
# min value to pick
bias_min_value          = -30.0
# changes after mutations
bias_mutate_power       = 0.5
bias_mutate_rate        = 0.7
bias_replace_rate       = 0.1

# genome compatibility options
compatibility_disjoint_coefficient = 1.0
compatibility_weight_coefficient   = 0.5

# connection add/remove rates
conn_add_prob           = 0.5
conn_delete_prob        = 0.5

# connection enable options
# default status of connections
enabled_default         = True
# chance for a connection to change it's status
enabled_mutate_rate     = 0.01

# using neural network with no loops and no memory
feed_forward            = True
initial_connection      = full  

# node add/remove rates
node_add_prob           = 0.2
node_delete_prob        = 0.2

# network parameters
# number of hidden neurons
num_hidden              = 0
# number of imput neurons (drake.y, distance to top pipe, distance to bottom pipe) 
num_inputs              = 3
# number of output neurons (flap?)
num_outputs             = 1

# node response options
# response attribute mean type
response_init_type      = gaussian
# response multiplier attribute values for new nodes
response_init_mean      = 1.0
response_init_stdev     = 0.0
response_max_value      = 30.0
response_min_value      = -30.0
response_mutate_power   = 0.0
response_mutate_rate    = 0.0
response_replace_rate   = 0.0

# connection weight options
# weight attribute mean type
weight_init_type        = gaussian
# weight attribute values for new connections
weight_init_mean        = 0.0
weight_init_stdev       = 1.0
weight_max_value        = 30
weight_min_value        = -30
weight_mutate_power     = 0.5
weight_mutate_rate      = 0.8
weight_replace_rate     = 0.1

[DefaultSpeciesSet]
# if genomic distance is less than this, then genomes are from the same species
compatibility_threshold = 3.0

[DefaultStagnation]
# function used to compute species fitness
species_fitness_func = max
# species wihout improvement in more generations that that will be considered stagnant and removed
max_stagnation       = 20
# prevent number of species with highest fitness from stagnation 
species_elitism      = 2

[DefaultReproduction]
# number of most-fit individuals in each species that will be preserved as-is from one generation to the next
elitism            = 2
# fraction for each species allowed to reproduce each generation
survival_threshold = 0.2
# minimum number of genomes per species after reproduction 
min_species_size   = 2
